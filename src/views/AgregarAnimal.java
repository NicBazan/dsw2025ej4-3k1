/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;
import data.Persistencia;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import domain.Pais
/**
 *
 * @author USURIO
 *//**
 *
 * @author USURIO
 */
public class AgregarAnimal extends javax.swing.JFrame implements InterfaceAgregar{

    private boolean cambiosRealizados = false;
    /**
     * Creates new form AgregarAnimal
     */
     
    public VistaAgregar() {
        initComponents();
    }

    public void limpiarCampos() {
        edadText.setText("");
        pesoText.setText("");
        comboEspecie.setSelectedIndex(0);
        comboPais.setSelectedIndex(0);
        comboSectores.setSelectedIndex(0);
        etiquetaTipoAlimentacion.setText("");

        cambiosRealizados = false; // Reiniciás la bandera
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
@Override
    public void ejecutar() {
        this.setVisible(true);
    }

    @Override
    public void setControlador(Controlador c) {
        botonSalir.setActionCommand(botonSalirInt);
        botonSalir.addActionListener(c);
        botonAgregar.setActionCommand(botonAgregarInt);
        botonAgregar.addActionListener(c);
    }

    @Override
    public int getEdad() {
        try {
            return Integer.parseInt(edadText.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese una edad válida.", "Error en la entrada", JOptionPane.ERROR_MESSAGE);
            return -1;
        }

    }

    public double getPeso() {
        try {
            return Double.parseDouble(pesoText.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese un peso válido.", "Error en la entrada", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }

    @Override
    public String getComboPais() {
        try {
            return comboPais.getSelectedItem().toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese un pais válido.", "Error en la entrada", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    public String getComboEspecie() {
        try {
            return comboEspecie.getSelectedItem().toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese una especie válida.", "Error en la entrada", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    @Override
    public int getComboSector() {
        try {
            return Integer.parseInt(comboSectores.getSelectedItem().toString());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese un sector válido.", "Error en la entrada", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }

    public void setEtiquetaAlimentacion(String alimento) {
        etiquetaTipoAlimentacion.setText(alimento);
    }

    public String getEtiquetaTipoAlimentacion() {
        return etiquetaTipoAlimentacion.getText();
    }

    public void actualizarComboSectores(String especie) {
        comboSectores.removeAllItems();

        if (especie.equals("León") || especie.equals("Tigre")) {
            comboSectores.addItem("2");
            comboSectores.addItem("4");
            setEtiquetaAlimentacion("Carnívoro");
        } else if (especie.equals("Jirafa") || especie.equals("Elefante")) {
            comboSectores.addItem("1");
            comboSectores.addItem("3");
            setEtiquetaAlimentacion("Herbívoro");
        } else {
            comboSectores.addItem("Seleccione la especie");
            setEtiquetaAlimentacion("-");
        }
    }

    public void cargarComboPais(data.Persistencia persistencia) {
        comboPais.removeAllItems();

        for (Pais pais : persistencia.getPaises()) {
            comboPais.addItem(pais.getNombre());
        }
    }

    public boolean isCambiosRealizados() {
        return cambiosRealizados;
    }

    public void setCambiosRealizados(boolean cambiosRealizados) {
        this.cambiosRealizados = cambiosRealizados;
    }

    @Override
    public void cerrar() {
       limpiarCampos(); 
       this.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
